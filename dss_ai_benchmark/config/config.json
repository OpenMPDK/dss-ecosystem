{
  "framework": {"name": "PyTorch",
                "TensorFlow": {
  
                },
                "PyTorch": {
                  "DataLoader": {
                    "shuffle": true,
                    "num_workers": 64,
                    "persistent_workers": false,
                    "prefetch_factor": 2,
                    "pin_memory": false,
                    "drop_last": false
                  },
                  "distributed_data_parallel": false
                },
                "batch_size": 100,
                "max_batch_size": 10000,
                "max_object_size": 1048576 ,
                "epochs": 1,
                "instance_id": 1
                },
  
  "execution":{
    "workers": 10,
    "steps":{
      "model": true,
      "training": true,
      "inference": false,
      "metrics": true
    }
  },
  "device": "CPU",
  "model":{
    "choice": "ConvNet",

    "ConvNet": {
        "loss_function": "<Specify Loss Function ex.[CorssEntrophy]"
    },
    "ObjectDetector": {
        "loss_function": ["MSE", "CrossEntropy"]
    }
  },
  "training":{
      "choice": "RandomAccessDatasetTrain",

      "RandomAccessDatasetTrain": {
          "__comment__": "Whether we are going for a Random access or Sequential access",
          "access_method": "Random"
      },
      "ObjectDetectionDatasetTrain": {
          "__comment__": "Specify the Learning Rate, the initial Loss weights",
          "init_lr": 1e-4,
          "label_loss": 1.0,
          "bbox_loss": 1.0
      }
  },
  "dataset" : {
               "choice": "TorchImageClassificationDataset",

               "TorchImageClassificationDataset": {
                    "access": {"random": true, "sequential": false},
                    "type": "image",
                    "label": ["daisy", "dandelion", "roses", "sunflowers", "tulips"],
                    "image_dimension": [32, 32],

                    "__comment__": "Below line specifies the average image file size in 'KB'; has been included --",
                    "__comment__": "-- to avoid extra file reads to extract the dataset size.",
                    "avg_image_size": 62
               },
               "TorchObjectDetectionDataset": {
                    "access": {"random": true, "sequential": false},
                    "type": "image",
                    "label": ["Car", "Motorcycle", "Airplane", "Bus", "Truck"],

                    "__comment__": "Specify ImageNet compatible image dimensions",
                    "image_dimension": [224, 224],

                    "__comment__": "Below line specifies the average image file size in 'KB'; has been included --",
                    "__comment__": "-- to avoid extra file reads to extract the dataset size.",
                    "avg_image_size": 315,

                    "__comment__": "specify ImageNet mean and standard deviation",
                    "mean": [0.485, 0.456, 0.406],
                    "std": [0.229, 0.224, 0.225]
               }
  },
  "storage": {
      "format": "s3",
      "name": "dss",
      "s3": {
        "bucket": "dss0",
        "prefix": ["flower_photos/"],
        "client_lib": {
          "name": "boto3",
          "dss_client": {"max_connections":25, "http_request_timeout_ms":0, "connect_timeout_ms":1000,
                         "request_timeout_ms": 10000, "enable_tcp_keep_alive":true,
                         "tcp_keep_alive_interval_ms":  1000, "object_keys_per_page_count":  1000,
                         "endpoints_per_cluster": 256}
        },
        "aws": {
          "credentials": {
            "region_name": "us-east-2",
            "access_key": "access_key",
            "secret_key": "secret_key"
          }
        },
        "dss": {
          "credentials": {
            "endpoint": "http://10.1.51.107:9000",
            "access_key": "minio",
            "secret_key": "minio123"
          }
        }
      },
      "fs": {
         "choice": "ConvNet",
         "ConvNet": {
           "data_dir": ["/nfs_share1"],
           "base_output_dir": "image_classifier_outputs",
           "saved_model_name": "classifier.pt",
           "predictions_path": "image_classifier_outputs/predicted_images"
         },
         "ObjectDetector": {
           "data_dir": ["/Dss_Datasets/google_open_images/OID/Dataset"],
           "base_output_dir": "object_detector_outputs",
           "saved_model_name": "detector.pth",
           "le_name": "label_encoder.pickle",
           "plots_path": "object_detector_outputs/plots",
           "predictions_path": "object_detector_outputs/predicted_images",
           "test_paths": "object_detector_outputs/test_paths.txt"
         }
      }
  },
  "metrics": {
      "format": "csv",
      "graph": {"name": "SampleGraph", "enabled": false},
      "path": "/home/somnath.s/work/dss_dnn_benchmark"
  },
  "logging": { "path": "/home/somnath.s/work/dss_dnn_benchmark", "level": "INFO"}
}
